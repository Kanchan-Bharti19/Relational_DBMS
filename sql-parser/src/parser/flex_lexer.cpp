#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 132
#define YY_END_OF_BUFFER 133
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[914] =
    {   0,
        0,    0,    2,    2,  133,  131,    4,    4,  131,  124,
      131,  124,  124,  127,  124,  124,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,    2,
        2,    3,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    4,    0,    0,  130,    1,  126,  125,
      127,  122,  121,  123,  129,  129,  129,  129,  129,  112,
      129,  113,  129,  129,  129,  129,  129,  129,  129,  129,

      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  114,  129,  115,  116,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  117,  118,
      119,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  120,  129,  129,
      129,  129,  129,  129,  129,  129,    2,    2,    2,    2,
        2,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      128,  125,   98,  129,   99,  129,  129,  100,  101,  129,
      129,  129,  129,  129,  129,  129,  129,  102,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  103,  129,
      129,  129,  129,  129,  129,  104,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  105,  129,
      129,  106,  129,  129,  129,  129,  129,  129,  129,  129,

      107,  129,  129,  108,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  109,  129,  129,  129,  129,
      110,  129,  129,  129,  129,  111,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  129,  129,  129,  129,  129,   72,  129,   73,
      129,  129,  129,  129,   74,  129,  129,  129,  129,   75,
      129,  129,  129,   76,   77,  129,  129,  129,  129,  129,
       78,   79,   80,  129,  129,   81,  129,   82,  129,  129,
      129,  129,  129,  129,   83,  129,   84,   85,   86,  129,
       87,  129,  129,  129,  129,   88,  129,  129,  129,  129,
      129,   89,   90,  129,  129,  129,  129,  129,  129,  129,

       91,  129,  129,  129,  129,   92,   93,   94,  129,  129,
      129,  129,  129,  129,  129,   95,  129,   96,  129,   97,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,   54,   55,
      129,  129,  129,  129,  129,  129,  129,   56,  129,  129,
      129,   57,  129,  129,  129,  129,  129,  129,  129,  129,
      129,   58,  129,  129,  129,   59,   60,  129,  129,  129,
      129,   61,   62,   63,   64,  129,  129,  129,   65,   66,
      129,  129,  129,  129,  129,   67,  129,  129,  129,  129,
       68,  129,  129,  129,   69,  129,  129,  129,   70,  129,
      129,   71,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  129,   30,  129,  129,
       31,  129,   32,  129,  129,   33,   34,  129,   35,   36,
       37,  129,   38,  129,   39,   40,  129,   41,   42,  129,
      129,   43,  129,  129,   44,  129,  129,  129,   45,  129,
       46,   47,   48,  129,   49,  129,  129,  129,   50,   51,
       52,   53,  129,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       14,   15,   16,   17,   18,  129,   19,  129,   20,   21,
       22,   23,  129,   24,  129,  129,   25,   26,  129,   27,
       28,  129,  129,  129,   29,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      129,   10,  129,   11,  129,   12,  129,  129,   13,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  129,    7,

      129,    8,    9,    2,    2,    2,    2,    2,    5,    6,
        2,    2,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    5,    1,    6,    5,
        5,    5,    5,    5,    7,    8,    5,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    5,    5,   10,
       11,   12,    5,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
        1,    1,    1,    5,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,    5,    1,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    4,    1,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[921] =
    {   0,
        0,    0,   65,    0,  349, 3639,  129,  131,    0, 3639,
      338,  332,  310,  127,  126,  305,  123,  123,  131,  177,
      119,  170,  118,  138,  183,  119,  135,  175,  136,  199,
      219,  227,    0,  194,  270,  313,  249,  233,  223,    0,
      161,  203,  307,    0,  297,  289,  285,  239,  244,  272,
      370,  428,  480,  532,  580,  628,  271,  325,  676,  304,
      245,  383,  315,  728,  776,  828,  249,  405,  878,  930,
      978,  431,  437,  266,  270,  259, 3639, 3639,  254,  252,
      283, 3639, 3639, 3639,    0,  140,  161,  286,  307,  180,
      366,    0,  361,  340,  370,  295,  358,  478,  420,  383,

      419,  424,  440,  444,  491,  436,  431,  435,  439,  440,
      449,  482,  473,    0,  470,  525,  474,  484,  478,  503,
      527,  545,  498,  521,  522,  529,  539,  551,  547,    0,
      550,  535,  541,  560,  578,  576,  563,  581,  581,  576,
      578,  597,  598,  590,  600,  598,  594,  592,  588,  629,
      611,  630,  632,  640,  642,  628,    0,  297,  254,  244,
        0,    0,  207,  204,  297,    0,    0,    0,  652,  674,
      678,  695,  734,  689,  763,  719,  773,  779,  774,  817,
      818, 1030,  839,  782,  830,  822,  873,  884, 1080,  890,
      874,  892,  928,  922,  936,  968,  993,  918, 1021, 1129,

      981, 1018,  944, 1035, 1046, 1074, 1056, 1086, 1089, 1110,
     1112,  976, 1114, 1120, 1154, 1148, 1164, 1162, 1179, 1178,
     1200, 1166, 1208, 1197, 1218, 1216, 1233, 1241, 1232, 1246,
     1254, 1271, 1256, 1290, 1285, 1296, 1295, 1306, 1287, 1320,
     3639,  201,    0,  654,    0,  656,  657,    0,    0,  676,
      690,  719,  743,  715,  717,  744,  813,    0,  831,  836,
      860, 1060,  898,  947,  937,  987,  986, 1000,    0, 1010,
     1061, 1092, 1094, 1116, 1124,    0, 1137, 1187, 1225, 1221,
     1274, 1282, 1310, 1313, 1320, 1331, 1336, 1338, 1339, 1325,
     1335,    0, 1330, 1348, 1346, 1352, 1358, 1354, 1343, 1344,

        0, 1354, 1351, 1355, 1370, 1373, 1378, 1370, 1369, 1374,
     1388, 1370, 1386, 1390, 1392,    0, 1376, 1380, 1383, 1392,
        0, 1391, 1388, 1395, 1405,    0, 1399, 1403, 1400, 1418,
     1409, 1407, 1406, 1412, 1425, 1425,    0,  190, 1433, 1436,
     1439, 1444, 1462, 1447, 1448, 1477, 1458, 1472, 1490, 1500,
     1498, 1511, 1508, 1512, 1521, 1526, 1554, 1536, 1544, 1552,
     1565, 1570, 1575, 1562, 1576, 1588, 1598, 1606, 1600, 1629,
     1610, 1619, 1624, 1648, 1661, 1664, 1640, 1669, 1677, 1678,
     1702, 1652, 1674, 1683, 1713, 1715, 1717, 1714, 1728, 1718,
     1732, 1747, 1772, 1769, 1766, 1781, 1756, 1780, 1791, 1806,

     1785, 1790, 1825, 1830, 1835, 1834, 1860, 1843, 1868, 1802,
     1859, 1864, 1874, 1889, 1893, 1903, 1897, 1914, 1912, 1929,
     1926, 1928, 1942, 1960, 1947, 1968, 1981, 1966, 1985, 1996,
     2020, 2019, 1430, 1433, 1437, 1489, 1530,    0, 1570,    0,
     1630, 1714, 1736, 1743,    0, 1781, 1835, 1860, 1922,    0,
     1973, 1973, 1972,    0,    0, 1972, 1989, 1998, 2003, 2025,
        0,    0,    0, 2028, 2014,    0, 2017,    0, 2021, 2021,
     2016, 2023, 2024, 2042,    0, 2035,    0,    0,    0, 2035,
        0, 2047, 2057, 2045, 2052,    0, 2070, 2070, 2059, 2060,
     2066,    0,    0, 2079, 2080, 2070, 2066, 2065, 2075, 2087,

        0, 2087, 2084, 2089, 2080,    0,    0, 2077, 2095, 2085,
     2080, 2102, 2089, 2106, 2109,    0, 2095,    0, 2113,    0,
     2119, 2124, 2122, 2128, 2127, 2130, 2133, 2143, 2165, 2176,
     2152, 2181, 2178, 2184, 2186, 2215, 2187, 2197, 2221, 2232,
     2220, 2238, 2249, 2250, 2253, 2255, 2266, 2287, 2272, 2274,
     2284, 2309, 2295, 2303, 2317, 2318, 2339, 2327, 2341, 2335,
     2357, 2378, 2352, 2383, 2369, 2373, 2381, 2394, 2392, 2395,
     2406, 2423, 2411, 2427, 2446, 2432, 2435, 2456, 2457, 2440,
     2461, 2489, 2490, 2491, 2494, 2500, 2523, 2524, 2478, 2519,
     2528, 2533, 2552, 2554, 2556, 2564, 2565, 2568, 2582, 2573,

     2606, 2608, 2567, 2597, 2607, 2616, 2618, 2619,    0,    0,
     2113, 2182, 2251, 2290, 2315, 2348, 2445,    0, 2458, 2495,
     2530,    0, 2571, 2613, 2630, 2631, 2617, 2625, 2627, 2638,
     2640,    0, 2649, 2639, 2641,    0,    0, 2645, 2661, 2648,
     2657,    0,    0,    0,    0, 2674, 2668, 2657,    0,    0,
     2673, 2662, 2663, 2677, 2676,    0, 2685, 2667, 2685, 2689,
     2672, 2677, 2677, 2697,    0, 2694, 2696, 2696,    0, 2687,
     2709,    0, 2706, 2710, 2714, 2716, 2718, 2740, 2749, 2744,
     2748, 2750, 2772, 2773, 2759, 2774, 2783, 2802, 2788, 2804,
     2812, 2813, 2823, 2814, 2846, 2836, 2842, 2852, 2867, 2848,

     2857, 2876, 2858, 2886, 2881, 2890, 2902, 2911, 2912, 2920,
     2921, 2930, 2926, 2934, 2935, 2956, 2965, 2944, 2966, 2960,
     2979, 2974, 3009, 3004, 3014, 2998, 2995, 3023, 3020, 3032,
     3049, 3033, 3044, 3054, 3062, 3057, 2715,    0, 2715, 2725,
     2715, 2771,    0, 2791, 2775,    0,    0, 2849,    0,    0,
        0, 2898,    0, 2927,    0,    0, 2970,    0,    0, 3026,
     3063,    0, 3058, 3076,    0, 3058, 3078, 3063,    0, 3088,
     3073,    0,    0, 3081,    0, 3097, 3098, 3082,    0,    0,
        0,    0, 3091, 3102, 3103, 3107, 3106, 3117, 3112, 3108,
     3140, 3136, 3141, 3142, 3172, 3157, 3166, 3171, 3174, 3175,

     3176, 3180, 3190, 3205, 3206, 3208, 3211, 3209, 3214, 3239,
     3220, 3230, 3245, 3242, 3244, 3248, 3276, 3270, 3278, 3279,
     3293, 3282, 3308, 3314, 3318, 3312, 3316, 3322, 3324, 3346,
        0,    0,    0,    0,    0, 3122,    0, 3137,    0,    0,
        0,    0, 3256,    0, 3267, 3288,    0,    0, 3279,    0,
        0, 3317, 3339, 3348,    0, 3350, 3352, 3356, 3358, 3362,
     3368, 3367, 3381, 3384, 3386, 3390, 3392, 3400, 3402, 3421,
     3416, 3418, 3424, 3435, 3426, 3432, 3454, 3456, 3458, 3460,
     3415,    0, 3427,    0, 3453,    0, 3450, 3461,    0, 3475,
     3484, 3498, 3488, 3496, 3492, 3500, 3510, 3506, 3514,    0,

     3510,    0,    0, 3529, 3532, 3544, 3534, 3542,    0,    0,
     3546, 3550, 3639, 3614, 3618,  161, 3622, 3626, 3630, 3634
    } ;

static yyconst flex_int16_t yy_def[921] =
    {   0,
      913,    1,  913,    3,  913,  913,  913,  913,  914,  913,
      915,  913,  913,  913,  913,  913,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  917,
      917,  913,  918,  917,  919,  917,  917,  917,  917,  917,
      920,  920,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,  913,  914,  915,  913,  913,  913,  913,
      913,  913,  913,  913,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,

      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  917,  917,  918,  919,
      917,  917,  917,  917,  917,  917,  917,  917,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
      913,  913,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,

      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  917,  917,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,

      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
      916,  916,  916,  916,  916,  916,  916,  916,  916,   52,
       52,   52,   52,   52,   52,   52,   52,   52,  916,  916,

      916,  916,  916,   52,   52,   52,   52,   52,  916,  916,
       52,   52,    0,  913,  913,  913,  913,  913,  913,  913
    } ;

static yyconst flex_int16_t yy_nxt[3705] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       10,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   33,   33,   33,    6,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   33,   33,   33,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   44,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,

       67,   67,   67,   40,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,   69,   70,   71,   72,   73,   67,   67,   67,
       74,   74,   74,   74,   80,   81,   82,   83,   86,   91,
       87,  110,  102,   93,  103,  118,   88,  111,   89,  104,
      112,  119,  123,   90,  105,  243,  124,   94,  113,   92,
       95,   96,  158,   74,   85,   86,   91,   87,  110,  102,
       93,  103,  118,   88,  111,   89,  104,  112,  119,  123,
       90,  105,  243,  124,   94,  113,   92,   95,   96,   97,
      106,  120,  244,   98,  249,  121,  107,   99,  338,  108,

      114,  122,  109,  100,   74,   74,  101,  115,  116,  242,
      136,  125,  338,  117,  137,  163,   97,  106,  120,  244,
       98,  249,  121,  107,   99,  126,  108,  114,  122,  109,
      100,  127,  128,  101,  115,  116,  129,  136,  125,  133,
      117,  137,  155,  156,  130,  153,  164,  165,  131,  161,
      134,  132,  126,  154,  166,  167,  135,  337,  127,  128,
      242,  203,   79,  129,   77,  169,  133,   74,   74,  155,
      156,  130,  153,  241,  150,  131,  151,  134,  132,  152,
      154,  169,  168,  135,  138,  169,  139,  169,  203,  140,
       80,   81,  169,  163,  194,  162,  141,  142,  158,   74,

      195,  150,  161,  151,  164,  165,  152,  169,  169,  245,
      157,  138,  169,  139,  169,   84,  140,  246,   79,  247,
      169,  194,  248,  141,  142,  143,  144,  195,  258,  145,
      202,  207,  146,  147,  169,  208,  245,  196,   78,  148,
      169,  169,  149,   77,  246,  197,  247,  169,  913,  248,
      913,  169,  143,  144,  913,  258,  145,  202,  207,  146,
      147,  169,  208,  254,  196,  255,  148,  169,  169,  149,
      157,  157,  197,  157,  157,  157,  157,  157,  169,  157,
      157,  157,  913,  250,  252,  170,  256,  171,  169,  259,
      254,  253,  255,  172,  913,  173,  257,  251,  913,  204,

      174,  913,  913,  205,  913,  913,  913,  913,  913,  206,
      250,  252,  170,  256,  171,  266,  259,  913,  253,  169,
      172,  220,  173,  257,  251,  221,  204,  174,  157,  157,
      205,  157,  157,  157,  157,  157,  206,  157,  157,  157,
      913,  169,  266,  237,  175,  267,  169,  169,  220,  264,
      265,  238,  221,  169,  268,  269,  239,  240,  270,  275,
      276,  277,  278,  913,  176,  913,  279,  169,  169,  913,
      237,  175,  267,  169,  169,  280,  264,  265,  238,  913,
      169,  268,  269,  239,  240,  270,  275,  276,  277,  278,
      260,  176,  177,  279,  169,  261,  169,  285,  283,  290,

      169,  262,  280,  284,  291,  271,  178,  272,  263,  179,
      180,  273,  281,  913,  292,  282,  169,  260,  274,  177,
      293,  913,  261,  169,  285,  283,  290,  298,  262,  913,
      284,  291,  271,  178,  272,  263,  179,  180,  273,  281,
      286,  292,  282,  169,  181,  274,  299,  293,  182,  294,
      287,  295,  183,  300,  298,  288,  289,  296,  184,  297,
      301,  185,  302,  303,  304,  305,  306,  286,  169,  913,
      307,  181,  308,  299,  913,  182,  294,  287,  295,  183,
      300,  313,  288,  289,  296,  184,  297,  301,  185,  302,
      303,  304,  305,  306,  309,  169,  169,  307,  310,  308,

      314,  311,  317,  186,  315,  187,  312,  318,  313,  319,
      188,  320,  316,  321,  324,  189,  169,  913,  325,  326,
      327,  309,  913,  169,  322,  310,  330,  314,  311,  317,
      186,  315,  187,  312,  318,  323,  319,  188,  320,  316,
      321,  324,  189,  169,  169,  325,  326,  327,  190,  328,
      331,  322,  329,  330,  191,  332,  333,  192,  335,  336,
      193,  913,  323,  913,  169,  913,  913,  913,  169,  334,
      433,  169,  434,  913,  913,  190,  328,  331,  913,  329,
      435,  191,  332,  333,  192,  335,  336,  193,  169,  339,
      169,  169,  169,  198,  169,  169,  334,  433,  913,  434,

      199,  200,  436,  345,  913,  169,  201,  435,  913,  340,
      169,  169,  169,  913,  169,  169,  339,  169,  341,  169,
      198,  169,  913,  913,  437,  169,  342,  199,  200,  436,
      345,  169,  169,  201,  913,  169,  340,  169,  169,  169,
      209,  169,  438,  913,  169,  341,  343,  441,  442,  344,
      169,  437,  169,  342,  210,  169,  443,  439,  169,  440,
      211,  212,  169,  913,  169,  913,  913,  209,  913,  438,
      169,  169,  913,  343,  441,  442,  344,  169,  913,  169,
      346,  210,  169,  443,  439,  913,  440,  211,  212,  169,
      352,  169,  169,  213,  347,  169,  348,  169,  169,  169,

      353,  214,  350,  349,  351,  215,  169,  346,  216,  169,
      169,  913,  169,  913,  362,  169,  169,  352,  169,  169,
      213,  347,  169,  348,  913,  169,  169,  353,  214,  350,
      349,  351,  215,  169,  169,  216,  169,  169,  169,  169,
      217,  362,  169,  444,  169,  169,  169,  445,  913,  355,
      354,  218,  364,  169,  169,  169,  363,  219,  169,  446,
      169,  169,  913,  913,  169,  169,  169,  217,  360,  361,
      444,  169,  447,  169,  445,  169,  355,  354,  218,  364,
      169,  169,  169,  363,  219,  169,  446,  913,  365,  169,
      169,  169,  222,  169,  223,  360,  361,  224,  366,  447,

      169,  913,  169,  372,  225,  226,  169,  913,  169,  169,
      169,  913,  450,  371,  169,  365,  169,  169,  373,  222,
      169,  223,  913,  913,  224,  366,  169,  169,  169,  913,
      372,  225,  226,  169,  169,  169,  169,  169,  169,  450,
      371,  169,  227,  228,  169,  373,  229,  169,  375,  230,
      231,  374,  169,  169,  169,  169,  232,  913,  169,  233,
      169,  169,  376,  451,  169,  169,  169,  913,  452,  227,
      228,  169,  169,  229,  913,  375,  230,  231,  374,  169,
      388,  169,  913,  232,  169,  169,  233,  169,  399,  376,
      451,  169,  169,  169,  169,  452,  913,  169,  377,  169,

      453,  378,  913,  234,  169,  235,  386,  388,  236,  169,
      913,  169,  169,  454,  169,  399,  455,  169,  379,  169,
      913,  169,  456,  380,  169,  377,  913,  453,  378,  169,
      234,  169,  235,  386,  169,  236,  169,  169,  387,  169,
      454,  169,  356,  455,  169,  379,  169,  357,  381,  456,
      380,  169,  389,  358,  169,  913,  169,  169,  913,  913,
      359,  169,  169,  913,  169,  387,  169,  913,  390,  356,
      391,  169,  169,  169,  357,  381,  448,  457,  169,  389,
      358,  169,  169,  913,  169,  394,  392,  359,  393,  169,
      169,  449,  169,  169,  367,  390,  368,  391,  169,  169,

      369,  913,  169,  448,  457,  169,  458,  370,  913,  169,
      169,  395,  394,  392,  913,  393,  169,  169,  449,  169,
      396,  367,  169,  368,  459,  169,  169,  369,  169,  169,
      169,  400,  169,  458,  370,  398,  169,  169,  395,  460,
      461,  397,  913,  169,  382,  169,  169,  396,  169,  169,
      169,  459,  169,  169,  383,  169,  169,  169,  400,  384,
      385,  462,  398,  169,  169,  169,  460,  461,  397,  401,
      169,  382,  169,  169,  404,  169,  913,  169,  169,  402,
      169,  383,  169,  169,  169,  410,  384,  385,  462,  913,
      169,  169,  169,  403,  169,  405,  401,  169,  169,  406,

      169,  404,  169,  407,  913,  169,  402,  169,  408,  169,
      463,  169,  410,  169,  169,  169,  169,  169,  409,  913,
      403,  169,  405,  413,  169,  169,  406,  169,  415,  169,
      407,  411,  169,  169,  169,  408,  169,  463,  464,  412,
      169,  169,  169,  169,  169,  409,  416,  414,  169,  169,
      413,  169,  169,  465,  169,  415,  418,  169,  411,  169,
      169,  169,  420,  169,  417,  464,  412,  419,  169,  169,
      169,  169,  169,  416,  414,  169,  169,  169,  421,  169,
      465,  169,  169,  418,  169,  913,  913,  169,  423,  420,
      169,  417,  169,  466,  419,  169,  169,  169,  422,  169,

      426,  169,  467,  431,  169,  421,  169,  169,  913,  169,
      424,  169,  169,  425,  169,  423,  427,  169,  428,  169,
      466,  169,  429,  169,  913,  422,  169,  426,  169,  467,
      431,  169,  169,  169,  169,  430,  169,  424,  169,  169,
      425,  468,  169,  427,  469,  428,  470,  471,  169,  429,
      169,  432,  472,  169,  473,  474,  169,  476,  169,  169,
      477,  478,  430,  169,  479,  475,  480,  481,  468,  169,
      482,  469,  483,  470,  471,  484,  485,  486,  432,  472,
      487,  473,  474,  169,  476,  488,  489,  477,  478,  490,
      491,  479,  475,  480,  481,  493,  494,  482,  495,  483,

      496,  497,  484,  485,  486,  498,  499,  487,  500,  492,
      501,  502,  488,  489,  503,  504,  490,  491,  505,  506,
      507,  508,  493,  494,  509,  495,  512,  496,  497,  510,
      513,  511,  498,  499,  514,  500,  492,  501,  502,  515,
      516,  503,  504,  517,  520,  505,  506,  507,  508,  169,
      518,  509,  521,  512,  519,  169,  510,  513,  511,  609,
      522,  514,  610,  169,  169,  913,  515,  516,  913,  169,
      517,  520,  169,  611,  169,  169,  169,  518,  169,  521,
      169,  519,  169,  169,  169,  523,  609,  522,  169,  610,
      169,  169,  525,  169,  169,  526,  169,  913,  169,  169,

      611,  169,  169,  524,  527,  169,  528,  169,  169,  913,
      169,  169,  523,  169,  169,  169,  169,  913,  612,  525,
      169,  169,  526,  531,  169,  169,  169,  169,  169,  530,
      524,  527,  529,  528,  169,  169,  169,  533,  532,  913,
      169,  169,  169,  169,  169,  612,  613,  169,  169,  534,
      531,  169,  536,  169,  169,  169,  530,  169,  538,  529,
      169,  169,  169,  169,  533,  532,  535,  537,  539,  169,
      169,  169,  169,  613,  169,  169,  534,  913,  543,  536,
      169,  169,  614,  541,  169,  538,  169,  169,  169,  169,
      169,  169,  169,  535,  537,  539,  540,  169,  169,  169,

      544,  169,  542,  913,  169,  543,  169,  169,  169,  614,
      541,  169,  169,  169,  545,  169,  169,  169,  169,  169,
      546,  913,  169,  540,  169,  169,  549,  544,  169,  542,
      547,  169,  913,  169,  169,  169,  169,  913,  169,  169,
      169,  545,  169,  169,  913,  169,  169,  546,  550,  169,
      913,  169,  548,  549,  615,  169,  169,  547,  913,  554,
      169,  169,  169,  169,  169,  169,  913,  169,  559,  169,
      913,  551,  169,  169,  552,  550,  169,  169,  913,  548,
      169,  615,  169,  169,  169,  169,  554,  169,  169,  555,
      560,  169,  169,  169,  169,  559,  553,  169,  551,  561,

      169,  552,  913,  169,  169,  169,  913,  169,  556,  557,
      169,  169,  169,  169,  169,  169,  555,  560,  169,  169,
      169,  169,  913,  553,  169,  913,  561,  169,  558,  562,
      169,  169,  169,  169,  567,  556,  557,  169,  169,  563,
      169,  169,  565,  616,  169,  169,  169,  564,  169,  169,
      169,  169,  568,  169,  169,  558,  562,  169,  169,  566,
      169,  567,  569,  169,  169,  169,  563,  617,  169,  565,
      616,  169,  169,  618,  564,  169,  169,  169,  169,  568,
      169,  169,  169,  169,  570,  169,  566,  571,  169,  569,
      169,  169,  169,  913,  617,  169,  169,  169,  572,  169,

      618,  577,  169,  574,  619,  169,  578,  169,  169,  169,
      169,  570,  169,  573,  571,  169,  169,  169,  587,  169,
      575,  169,  169,  169,  169,  572,  169,  169,  577,  169,
      574,  619,  169,  578,  169,  169,  576,  579,  169,  913,
      573,  169,  169,  169,  169,  587,  169,  575,  169,  169,
      169,  169,  913,  169,  169,  581,  580,  913,  583,  169,
      913,  169,  582,  576,  579,  169,  169,  620,  169,  169,
      169,  169,  584,  169,  585,  588,  169,  169,  169,  169,
      169,  913,  581,  580,  169,  583,  169,  586,  169,  582,
      169,  621,  913,  169,  620,  169,  169,  169,  169,  584,

      169,  585,  588,  169,  169,  169,  169,  169,  589,  169,
      169,  169,  913,  169,  586,  913,  913,  169,  621,  169,
      590,  913,  169,  169,  591,  169,  592,  169,  169,  169,
      169,  169,  169,  169,  622,  589,  169,  169,  913,  169,
      169,  593,  596,  594,  169,  169,  169,  590,  169,  913,
      169,  591,  169,  592,  595,  169,  169,  169,  169,  913,
      169,  622,  169,  169,  169,  169,  169,  597,  593,  596,
      594,  169,  169,  600,  913,  169,  169,  169,  169,  913,
      601,  595,  169,  169,  169,  169,  598,  623,  599,  169,
      169,  169,  169,  624,  597,  625,  169,  169,  603,  626,

      600,  169,  169,  169,  169,  169,  602,  601,  913,  169,
      169,  169,  169,  598,  623,  599,  627,  169,  913,  604,
      624,  169,  625,  169,  169,  603,  626,  605,  169,  169,
      628,  169,  169,  602,  629,  169,  169,  630,  608,  169,
      631,  632,  633,  627,  169,  606,  604,  634,  169,  607,
      635,  636,  637,  638,  605,  169,  169,  628,  641,  169,
      639,  629,  169,  169,  630,  608,  642,  631,  632,  633,
      643,  640,  606,  644,  634,  645,  607,  635,  636,  637,
      638,  646,  169,  169,  647,  641,  648,  639,  649,  650,
      651,  652,  653,  642,  654,  655,  656,  643,  640,  657,

      644,  658,  645,  659,  660,  661,  662,  663,  646,  664,
      665,  647,  666,  648,  667,  649,  650,  651,  652,  653,
      668,  654,  655,  656,  669,  670,  657,  671,  658,  672,
      659,  660,  661,  662,  663,  169,  664,  665,  169,  666,
      169,  667,  913,  677,  169,  678,  169,  668,  673,  169,
      737,  669,  670,  674,  671,  169,  672,  676,  675,  169,
      169,  913,  169,  169,  169,  169,  169,  169,  169,  169,
      677,  169,  678,  169,  913,  673,  169,  737,  913,  169,
      674,  169,  169,  681,  676,  675,  169,  169,  169,  679,
      169,  169,  169,  169,  169,  169,  169,  169,  738,  686,

      169,  169,  169,  169,  913,  680,  169,  683,  169,  913,
      681,  682,  169,  169,  169,  169,  679,  169,  684,  169,
      169,  169,  169,  169,  169,  738,  686,  169,  169,  169,
      169,  169,  680,  169,  683,  687,  169,  169,  682,  169,
      169,  169,  913,  689,  169,  684,  685,  169,  169,  169,
      169,  169,  688,  913,  169,  913,  169,  169,  169,  913,
      169,  913,  687,  169,  169,  169,  169,  739,  169,  169,
      689,  169,  913,  685,  169,  169,  913,  690,  169,  688,
      691,  169,  169,  169,  169,  169,  169,  692,  169,  169,
      169,  169,  169,  169,  739,  169,  169,  693,  169,  694,

      169,  169,  169,  169,  690,  740,  913,  691,  169,  169,
      169,  169,  169,  169,  692,  169,  169,  169,  169,  169,
      169,  695,  696,  169,  693,  169,  694,  169,  913,  169,
      169,  169,  740,  169,  169,  169,  913,  169,  169,  169,
      741,  913,  697,  169,  913,  169,  169,  169,  695,  696,
      169,  169,  169,  169,  169,  169,  699,  169,  169,  913,
      169,  169,  913,  169,  701,  698,  169,  741,  169,  697,
      169,  169,  169,  169,  742,  169,  700,  169,  169,  913,
      169,  169,  169,  699,  169,  169,  702,  913,  169,  169,
      169,  701,  698,  169,  169,  169,  703,  169,  169,  169,

      169,  742,  169,  700,  169,  169,  705,  704,  169,  169,
      169,  169,  169,  702,  169,  169,  169,  169,  707,  169,
      169,  169,  708,  703,  169,  706,  169,  169,  169,  913,
      169,  169,  169,  705,  704,  169,  169,  169,  169,  169,
      710,  169,  169,  169,  169,  707,  169,  169,  712,  708,
      913,  169,  706,  709,  169,  169,  169,  169,  169,  169,
      711,  743,  169,  169,  713,  913,  169,  710,  169,  169,
      169,  169,  169,  169,  169,  712,  169,  169,  169,  913,
      709,  715,  169,  169,  744,  714,  169,  711,  743,  169,
      169,  713,  169,  169,  169,  169,  913,  169,  169,  169,

      169,  716,  717,  169,  169,  169,  169,  169,  715,  169,
      169,  744,  714,  913,  169,  718,  169,  913,  745,  169,
      169,  169,  913,  719,  169,  169,  169,  169,  716,  717,
      169,  720,  169,  169,  169,  723,  169,  169,  722,  169,
      169,  169,  718,  169,  169,  745,  746,  721,  724,  725,
      719,  913,  169,  169,  169,  169,  913,  169,  720,  169,
      169,  913,  723,  169,  169,  722,  169,  169,  169,  169,
      169,  169,  169,  746,  721,  724,  725,  913,  726,  728,
      169,  169,  169,  734,  169,  731,  169,  169,  169,  169,
      169,  169,  169,  729,  727,  169,  169,  169,  169,  169,

      169,  169,  747,  169,  169,  726,  728,  169,  169,  169,
      734,  169,  731,  169,  730,  169,  169,  169,  169,  169,
      729,  727,  169,  169,  169,  169,  733,  169,  169,  747,
      169,  169,  169,  169,  736,  169,  169,  732,  748,  735,
      169,  730,  169,  169,  169,  169,  749,  750,  751,  169,
      169,  169,  169,  733,  169,  169,  752,  753,  754,  169,
      169,  736,  169,  755,  732,  748,  735,  756,  757,  169,
      169,  169,  758,  749,  750,  751,  759,  760,  761,  169,
      762,  169,  169,  752,  753,  754,  763,  764,  765,  766,
      755,  767,  768,  769,  756,  757,  770,  771,  772,  758,

      773,  774,  775,  759,  760,  761,  776,  762,  777,  778,
      779,  780,  781,  763,  764,  765,  766,  782,  767,  768,
      769,  783,  169,  770,  771,  772,  169,  773,  774,  775,
      169,  831,  785,  776,  786,  777,  778,  779,  780,  781,
      832,  833,  169,  913,  782,  834,  169,  913,  783,  169,
      169,  784,  169,  169,  169,  787,  169,  169,  831,  785,
      169,  786,  913,  913,  790,  169,  169,  832,  833,  169,
      789,  913,  834,  169,  788,  793,  169,  169,  784,  169,
      169,  169,  787,  169,  169,  169,  169,  169,  169,  169,
      169,  790,  169,  169,  835,  169,  792,  789,  791,  169,

      913,  788,  793,  169,  796,  836,  837,  169,  169,  169,
      169,  169,  169,  169,  794,  169,  169,  169,  169,  169,
      797,  835,  169,  792,  169,  791,  169,  795,  169,  169,
      169,  796,  836,  837,  801,  169,  169,  169,  169,  169,
      169,  794,  913,  798,  799,  169,  169,  797,  169,  169,
      169,  169,  169,  800,  795,  169,  169,  169,  169,  169,
      803,  801,  169,  838,  169,  169,  169,  169,  169,  802,
      798,  799,  169,  169,  807,  169,  169,  169,  169,  169,
      800,  804,  169,  169,  169,  169,  169,  803,  169,  169,
      838,  169,  169,  169,  169,  169,  802,  169,  805,  169,

      169,  807,  169,  169,  809,  169,  169,  806,  804,  169,
      169,  169,  169,  913,  839,  169,  808,  169,  169,  169,
      169,  169,  169,  913,  169,  805,  169,  169,  169,  169,
      169,  809,  810,  169,  806,  913,  169,  169,  169,  169,
      811,  839,  169,  808,  169,  169,  169,  169,  169,  169,
      169,  813,  840,  169,  169,  169,  169,  169,  913,  810,
      816,  812,  169,  169,  169,  169,  169,  811,  913,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  813,  840,
      169,  169,  169,  169,  169,  814,  817,  816,  812,  169,
      169,  818,  169,  169,  815,  169,  169,  169,  169,  169,

      913,  169,  169,  169,  913,  819,  841,  169,  169,  169,
      169,  169,  814,  817,  169,  169,  821,  169,  818,  169,
      169,  815,  169,  169,  820,  169,  824,  823,  169,  169,
      169,  169,  819,  841,  169,  825,  169,  169,  169,  169,
      169,  169,  169,  821,  822,  169,  913,  169,  826,  828,
      169,  820,  169,  824,  823,  842,  169,  169,  169,  169,
      169,  169,  825,  169,  827,  169,  169,  169,  169,  169,
      169,  822,  169,  169,  830,  826,  828,  169,  169,  843,
      169,  844,  842,  169,  829,  169,  169,  169,  845,  846,
      169,  827,  169,  169,  847,  169,  169,  169,  169,  848,

      169,  830,  849,  850,  851,  169,  843,  169,  844,  852,
      853,  829,  169,  854,  855,  845,  846,  169,  856,  169,
      169,  847,  858,  169,  169,  169,  848,  913,  169,  849,
      850,  851,  857,  169,  881,  860,  852,  853,  169,  169,
      854,  855,  169,  169,  169,  856,  169,  859,  169,  858,
      169,  169,  169,  169,  861,  169,  169,  169,  169,  857,
      169,  881,  860,  913,  913,  169,  169,  862,  882,  169,
      169,  169,  169,  169,  859,  169,  169,  169,  169,  169,
      169,  861,  169,  169,  169,  169,  863,  169,  169,  913,
      864,  169,  169,  169,  862,  882,  169,  913,  913,  169,

      169,  865,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  863,  169,  169,  169,  864,  169,  169,
      169,  169,  169,  169,  169,  868,  169,  169,  865,  169,
      169,  913,  870,  169,  169,  169,  169,  169,  169,  169,
      867,  866,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  868,  169,  169,  169,  169,  169,  872,  870,
      169,  169,  869,  169,  169,  913,  169,  867,  866,  169,
      883,  169,  169,  169,  169,  169,  871,  169,  169,  913,
      873,  169,  169,  169,  169,  872,  169,  169,  169,  869,
      874,  169,  169,  169,  169,  169,  884,  883,  169,  913,

      875,  913,  169,  871,  885,  169,  169,  873,  169,  169,
      886,  169,  169,  169,  169,  169,  876,  874,  169,  169,
      877,  169,  169,  884,  169,  169,  878,  875,  169,  169,
      169,  885,  169,  169,  169,  913,  169,  886,  169,  169,
      169,  169,  169,  876,  169,  169,  887,  877,  169,  879,
      169,  169,  169,  878,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  888,  889,  169,  169,  169,  169,  880,
      913,  169,  169,  887,  169,  169,  879,  169,  169,  169,
      890,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      888,  889,  169,  169,  169,  169,  880,  169,  169,  169,

      169,  169,  169,  169,  169,  169,  169,  890,  169,  169,
      169,  169,  891,  169,  892,  169,  169,  169,  169,  169,
      169,  169,  169,  913,  169,  169,  169,  169,  169,  169,
      169,  169,  894,  169,  169,  169,  169,  169,  169,  891,
      169,  892,  169,  169,  169,  169,  899,  169,  169,  169,
      893,  169,  169,  169,  169,  169,  913,  169,  900,  894,
      169,  169,  169,  169,  169,  169,  895,  169,  169,  169,
      169,  169,  169,  899,  898,  169,  169,  893,  169,  169,
      897,  169,  901,  896,  169,  900,  902,  169,  903,  169,
      169,  169,  169,  895,  169,  169,  169,  169,  169,  169,

      169,  898,  913,  169,  169,  913,  904,  897,  169,  901,
      896,  169,  169,  902,  169,  903,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  906,  169,  169,  169,  905,
      909,  169,  169,  904,  169,  169,  907,  908,  169,  169,
      910,  169,  169,  169,  913,  911,  169,  169,  169,  169,
      169,  169,  906,  169,  913,  169,  905,  909,  169,  169,
      169,  169,  169,  907,  908,  169,  169,  910,  169,  169,
      169,  913,  911,  169,  912,  169,  913,  169,  169,  913,
      169,  913,  169,  913,  913,  169,  169,  169,  913,  169,
      913,  913,  169,  169,  913,  169,  913,  169,  913,  913,

      913,  912,  913,  913,  913,  169,  913,  169,  913,  169,
      913,  913,  913,  169,   75,  913,  913,   75,   76,  913,
       76,   76,  157,  913,  157,  157,  159,  913,  159,  159,
      160,  913,  160,  160,  169,  913,  169,  169,    5,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,

      913,  913,  913,  913
    } ;

static yyconst flex_int16_t yy_chk[3705] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        7,    7,    8,    8,   14,   14,   15,   15,   17,   18,
       17,   23,   21,   19,   21,   26,   17,   23,   17,   21,
       24,   27,   29,   17,   21,   86,   29,   19,   24,   18,
       19,   19,   41,   41,  916,   17,   18,   17,   23,   21,
       19,   21,   26,   17,   23,   17,   21,   24,   27,   29,
       17,   21,   86,   29,   19,   24,   18,   19,   19,   20,
       22,   28,   87,   20,   90,   28,   22,   20,  338,   22,

       25,   28,   22,   20,   42,   42,   20,   25,   25,  242,
       34,   30,  164,   25,   34,  163,   20,   22,   28,   87,
       20,   90,   28,   22,   20,   30,   22,   25,   28,   22,
       20,   30,   30,   20,   25,   25,   31,   34,   30,   32,
       25,   34,   39,   39,   31,   38,   48,   48,   31,  160,
       32,   31,   30,   38,   49,   49,   32,  159,   30,   30,
       80,   61,   79,   31,   76,   67,   32,   74,   74,   39,
       39,   31,   38,   75,   37,   31,   37,   32,   31,   37,
       38,   61,   50,   32,   35,   67,   35,   57,   61,   35,
       81,   81,   67,   47,   57,   46,   35,   35,  158,  158,

       57,   37,   45,   37,  165,  165,   37,   57,   61,   88,
       43,   35,   67,   35,   57,   16,   35,   88,   13,   89,
       60,   57,   89,   35,   35,   36,   36,   57,   96,   36,
       60,   63,   36,   36,   57,   63,   88,   58,   12,   36,
       60,   58,   36,   11,   88,   58,   89,   60,    5,   89,
        0,   63,   36,   36,    0,   96,   36,   60,   63,   36,
       36,   58,   63,   94,   58,   94,   36,   60,   58,   36,
       51,   51,   58,   51,   51,   51,   51,   51,   63,   51,
       51,   51,    0,   91,   93,   51,   95,   51,   58,   97,
       94,   93,   94,   51,    0,   51,   95,   91,    0,   62,

       51,    0,    0,   62,    0,    0,    0,    0,    0,   62,
       91,   93,   51,   95,   51,  100,   97,    0,   93,   62,
       51,   68,   51,   95,   91,   68,   62,   51,   52,   52,
       62,   52,   52,   52,   52,   52,   62,   52,   52,   52,
        0,   68,  100,   72,   52,  101,   62,   72,   68,   99,
       99,   72,   68,   73,  102,  103,   73,   73,  104,  106,
      107,  108,  109,    0,   52,    0,  110,   72,   68,    0,
       72,   52,  101,   73,   72,  111,   99,   99,   72,    0,
       73,  102,  103,   73,   73,  104,  106,  107,  108,  109,
       98,   52,   53,  110,   72,   98,   53,  115,  113,  117,

       73,   98,  111,  113,  118,  105,   53,  105,   98,   53,
       53,  105,  112,    0,  119,  112,   53,   98,  105,   53,
      120,    0,   98,   53,  115,  113,  117,  123,   98,    0,
      113,  118,  105,   53,  105,   98,   53,   53,  105,  112,
      116,  119,  112,   53,   54,  105,  124,  120,   54,  121,
      116,  121,   54,  125,  123,  116,  116,  122,   54,  122,
      126,   54,  127,  128,  129,  131,  132,  116,   54,    0,
      133,   54,  134,  124,    0,   54,  121,  116,  121,   54,
      125,  137,  116,  116,  122,   54,  122,  126,   54,  127,
      128,  129,  131,  132,  135,   54,   55,  133,  135,  134,

      138,  136,  140,   55,  139,   55,  136,  141,  137,  142,
       55,  143,  139,  144,  146,   55,   55,    0,  147,  148,
      149,  135,    0,   55,  145,  135,  151,  138,  136,  140,
       55,  139,   55,  136,  141,  145,  142,   55,  143,  139,
      144,  146,   55,   55,   56,  147,  148,  149,   56,  150,
      152,  145,  150,  151,   56,  153,  154,   56,  155,  156,
       56,    0,  145,    0,   56,    0,    0,    0,  169,  154,
      244,   56,  246,    0,    0,   56,  150,  152,    0,  150,
      247,   56,  153,  154,   56,  155,  156,   56,  169,  170,
      170,   56,   59,   59,  171,  169,  154,  244,    0,  246,

       59,   59,  250,  174,    0,  174,   59,  247,    0,  171,
      170,  172,   59,    0,  171,  169,  170,  170,  172,   59,
       59,  171,    0,    0,  251,  174,  172,   59,   59,  250,
      174,  172,  174,   59,    0,  176,  171,  170,  172,   59,
       64,  171,  252,    0,   64,  172,  173,  254,  255,  173,
      173,  251,  174,  172,   64,  176,  256,  253,  172,  253,
       64,   64,  176,    0,   64,    0,    0,   64,    0,  252,
      173,   64,    0,  173,  254,  255,  173,  173,    0,  175,
      175,   64,  176,  256,  253,    0,  253,   64,   64,  177,
      179,   64,   65,   65,  175,  178,  177,  173,  184,  175,

      179,   65,  178,  177,  178,   65,  175,  175,   65,  177,
      179,    0,   65,    0,  184,  178,  177,  179,  184,   65,
       65,  175,  178,  177,    0,  184,  175,  179,   65,  178,
      177,  178,   65,  180,  181,   65,  177,  179,  186,   65,
       66,  184,  178,  257,   66,  184,  185,  259,    0,  181,
      180,   66,  186,  180,  181,  183,  185,   66,  186,  260,
      180,  181,    0,    0,   66,  186,  185,   66,  183,  183,
      257,   66,  261,  185,  259,  183,  181,  180,   66,  186,
      180,  181,  183,  185,   66,  186,  260,    0,  187,  187,
      191,   66,   69,  185,   69,  183,  183,   69,  188,  261,

      188,    0,  183,  191,   69,   69,  190,    0,  192,  187,
      191,    0,  263,  190,   69,  187,  187,  191,  192,   69,
      188,   69,    0,    0,   69,  188,  190,  188,  192,    0,
      191,   69,   69,  190,  198,  192,  187,  191,  194,  263,
      190,   69,   70,   70,  193,  192,   70,  188,  194,   70,
       70,  193,  195,  190,  198,  192,   70,    0,  194,   70,
      203,  198,  195,  264,  193,  194,   70,    0,  265,   70,
       70,  193,  195,   70,    0,  194,   70,   70,  193,  195,
      203,  198,    0,   70,  196,  194,   70,  203,  212,  195,
      264,  193,  212,   70,   71,  265,    0,  201,  196,  195,

      266,  196,    0,   71,  196,   71,  201,  203,   71,  197,
        0,  196,  212,  267,   71,  212,  268,  201,  197,  212,
        0,   71,  270,  197,  201,  196,    0,  266,  196,  197,
       71,  196,   71,  201,  202,   71,  197,  199,  202,  212,
      267,   71,  182,  268,  201,  197,  182,  182,  199,  270,
      197,  204,  204,  182,  202,    0,  197,  199,    0,    0,
      182,  202,  205,    0,  199,  202,  182,    0,  205,  182,
      205,  204,  207,  182,  182,  199,  262,  271,  204,  204,
      182,  202,  205,    0,  199,  207,  206,  182,  206,  205,
      206,  262,  207,  182,  189,  205,  189,  205,  204,  207,

      189,    0,  208,  262,  271,  209,  272,  189,    0,  205,
      206,  208,  207,  206,    0,  206,  189,  206,  262,  207,
      209,  189,  208,  189,  273,  209,  210,  189,  211,  208,
      213,  213,  209,  272,  189,  211,  214,  206,  208,  274,
      275,  210,    0,  189,  200,  200,  210,  209,  211,  208,
      213,  273,  209,  210,  200,  211,  214,  213,  213,  200,
      200,  277,  211,  214,  216,  200,  274,  275,  210,  215,
      215,  200,  200,  210,  218,  211,    0,  213,  218,  216,
      217,  200,  222,  214,  216,  222,  200,  200,  277,    0,
      215,  216,  200,  217,  220,  219,  215,  215,  218,  219,

      217,  218,  222,  220,    0,  218,  216,  217,  220,  222,
      278,  216,  222,  224,  220,  219,  221,  215,  221,    0,
      217,  220,  219,  224,  223,  218,  219,  217,  226,  222,
      220,  223,  226,  224,  225,  220,  221,  278,  279,  223,
      224,  220,  219,  221,  223,  221,  227,  225,  229,  227,
      224,  223,  226,  280,  225,  226,  229,  228,  223,  226,
      224,  225,  230,  221,  228,  279,  223,  229,  229,  227,
      231,  223,  233,  227,  225,  229,  227,  228,  231,  226,
      280,  225,  230,  229,  228,    0,    0,  232,  233,  230,
      231,  228,  233,  281,  229,  229,  227,  231,  232,  233,

      235,  235,  282,  239,  228,  231,  234,  232,    0,  230,
      234,  237,  236,  234,  232,  233,  236,  231,  237,  233,
      281,  235,  238,  239,    0,  232,  234,  235,  235,  282,
      239,  237,  236,  234,  232,  238,  240,  234,  237,  236,
      234,  283,  238,  236,  284,  237,  285,  286,  235,  238,
      239,  240,  287,  234,  288,  289,  240,  290,  237,  236,
      291,  293,  238,  240,  294,  289,  295,  296,  283,  238,
      297,  284,  298,  285,  286,  299,  300,  302,  240,  287,
      303,  288,  289,  240,  290,  304,  305,  291,  293,  306,
      307,  294,  289,  295,  296,  308,  309,  297,  310,  298,

      311,  312,  299,  300,  302,  313,  314,  303,  315,  307,
      317,  318,  304,  305,  319,  320,  306,  307,  322,  323,
      324,  325,  308,  309,  327,  310,  329,  311,  312,  328,
      330,  328,  313,  314,  331,  315,  307,  317,  318,  332,
      333,  319,  320,  334,  336,  322,  323,  324,  325,  339,
      335,  327,  340,  329,  335,  341,  328,  330,  328,  433,
      342,  331,  434,  344,  345,    0,  332,  333,    0,  339,
      334,  336,  340,  435,  347,  341,  339,  335,  343,  340,
      342,  335,  341,  344,  345,  343,  433,  342,  348,  434,
      344,  345,  347,  346,  347,  348,  339,    0,  343,  340,

      435,  347,  341,  346,  349,  343,  349,  342,  348,    0,
      344,  345,  343,  346,  351,  348,  350,    0,  436,  347,
      346,  347,  348,  352,  353,  343,  349,  352,  354,  351,
      346,  349,  350,  349,  351,  348,  350,  355,  353,    0,
      346,  351,  356,  350,  353,  436,  437,  352,  354,  356,
      352,  353,  358,  349,  352,  354,  351,  355,  359,  350,
      359,  351,  356,  350,  355,  353,  357,  358,  360,  356,
      357,  353,  358,  437,  352,  354,  356,    0,  364,  358,
      359,  361,  439,  362,  355,  359,  362,  359,  360,  356,
      357,  363,  365,  357,  358,  360,  361,  357,  364,  358,

      366,  361,  363,    0,  366,  364,  362,  359,  361,  439,
      362,  363,  365,  362,  367,  360,  369,  357,  363,  365,
      368,    0,  368,  361,  366,  364,  371,  366,  361,  363,
      369,  366,    0,  362,  367,  372,  369,    0,  363,  365,
      373,  367,  368,  369,    0,  370,  371,  368,  373,  368,
        0,  366,  370,  371,  441,  372,  377,  369,    0,  377,
      373,  367,  372,  369,  374,  370,    0,  373,  382,  368,
        0,  374,  370,  371,  375,  373,  377,  375,    0,  370,
      376,  441,  372,  377,  374,  378,  377,  373,  382,  378,
      383,  374,  370,  379,  380,  382,  376,  375,  374,  384,

      376,  375,    0,  377,  375,  378,    0,  376,  379,  380,
      383,  374,  378,  379,  380,  382,  378,  383,  381,  384,
      379,  380,    0,  376,  375,    0,  384,  376,  381,  385,
      388,  386,  378,  387,  390,  379,  380,  383,  381,  385,
      379,  380,  387,  442,  389,  381,  384,  386,  391,  385,
      388,  386,  391,  387,  390,  381,  385,  388,  386,  389,
      387,  390,  392,  392,  389,  381,  385,  443,  391,  387,
      442,  389,  397,  444,  386,  391,  385,  388,  386,  391,
      387,  390,  395,  392,  393,  394,  389,  394,  393,  392,
      392,  389,  397,    0,  443,  391,  398,  396,  395,  397,

      444,  401,  395,  398,  446,  394,  402,  399,  393,  395,
      392,  393,  394,  396,  394,  393,  398,  396,  410,  397,
      399,  401,  400,  398,  396,  395,  402,  399,  401,  395,
      398,  446,  394,  402,  399,  393,  400,  403,  410,    0,
      396,  403,  400,  398,  396,  410,  404,  399,  401,  400,
      406,  405,    0,  402,  399,  404,  403,    0,  406,  408,
        0,  403,  405,  400,  403,  410,  404,  447,  403,  400,
      406,  405,  407,  404,  408,  411,  407,  406,  405,  408,
      412,    0,  404,  403,  409,  406,  408,  409,  403,  405,
      413,  448,    0,  404,  447,  411,  407,  406,  405,  407,

      412,  408,  411,  407,  409,  414,  408,  412,  413,  415,
      413,  409,    0,  417,  409,    0,    0,  413,  448,  416,
      414,    0,  411,  407,  415,  414,  416,  412,  419,  415,
      418,  409,  414,  417,  449,  413,  415,  413,    0,  416,
      417,  418,  421,  419,  422,  420,  416,  414,  419,    0,
      418,  415,  414,  416,  420,  419,  415,  418,  423,    0,
      417,  449,  421,  425,  422,  420,  416,  423,  418,  421,
      419,  422,  420,  425,    0,  419,  424,  418,  423,    0,
      426,  420,  428,  425,  426,  423,  424,  451,  424,  421,
      425,  422,  420,  452,  423,  453,  424,  427,  428,  456,

      425,  429,  428,  424,  426,  423,  427,  426,    0,  428,
      425,  426,  430,  424,  451,  424,  457,  427,    0,  429,
      452,  429,  453,  424,  427,  428,  456,  430,  429,  428,
      458,  426,  430,  427,  459,  432,  431,  460,  432,  430,
      464,  465,  467,  457,  427,  431,  429,  469,  429,  431,
      470,  471,  472,  473,  430,  432,  431,  458,  476,  430,
      474,  459,  432,  431,  460,  432,  480,  464,  465,  467,
      482,  474,  431,  483,  469,  484,  431,  470,  471,  472,
      473,  485,  432,  431,  487,  476,  488,  474,  489,  490,
      491,  494,  495,  480,  496,  497,  498,  482,  474,  499,

      483,  500,  484,  502,  503,  504,  505,  508,  485,  509,
      510,  487,  511,  488,  512,  489,  490,  491,  494,  495,
      513,  496,  497,  498,  514,  515,  499,  517,  500,  519,
      502,  503,  504,  505,  508,  521,  509,  510,  523,  511,
      522,  512,    0,  525,  524,  527,  526,  513,  521,  527,
      611,  514,  515,  522,  517,  521,  519,  524,  523,  528,
      522,    0,  521,  525,  524,  523,  526,  522,  531,  527,
      525,  524,  527,  526,    0,  521,  527,  611,    0,  528,
      522,  529,  521,  531,  524,  523,  528,  522,  531,  529,
      525,  524,  530,  526,  533,  531,  527,  532,  612,  537,

      534,  529,  535,  537,    0,  530,  528,  534,  529,    0,
      531,  532,  530,  538,  533,  531,  529,  532,  535,  530,
      534,  533,  535,  537,  532,  612,  537,  534,  529,  535,
      537,  536,  530,  538,  534,  539,  541,  539,  532,  530,
      538,  533,    0,  541,  532,  535,  536,  534,  540,  535,
      537,  536,  540,    0,  542,    0,  541,  539,  536,    0,
      538,    0,  539,  541,  539,  543,  544,  613,  540,  545,
      541,  546,    0,  536,  542,  540,    0,  544,  536,  540,
      545,  542,  547,  541,  539,  543,  544,  546,  549,  545,
      550,  546,  543,  544,  613,  540,  545,  547,  546,  548,

      551,  542,  547,  548,  544,  614,    0,  545,  549,  547,
      550,  553,  543,  544,  546,  549,  545,  550,  546,  554,
      551,  552,  553,  548,  547,  552,  548,  551,    0,  547,
      548,  553,  614,  555,  556,  549,    0,  550,  553,  554,
      615,    0,  555,  558,    0,  552,  554,  551,  552,  553,
      548,  560,  552,  555,  556,  557,  558,  559,  553,    0,
      555,  556,    0,  558,  560,  557,  554,  615,  563,  555,
      558,  560,  552,  561,  616,  557,  559,  559,  560,    0,
      555,  556,  557,  558,  559,  565,  561,    0,  563,  566,
      558,  560,  557,  561,  562,  563,  562,  567,  560,  564,

      561,  616,  557,  559,  559,  565,  564,  562,  569,  566,
      568,  570,  565,  561,  562,  563,  566,  567,  570,  564,
      561,  562,  571,  562,  567,  568,  564,  573,  569,    0,
      568,  570,  565,  564,  562,  569,  566,  568,  570,  572,
      573,  562,  571,  574,  567,  570,  564,  573,  576,  571,
        0,  577,  568,  572,  573,  569,  580,  568,  570,  572,
      575,  617,  575,  574,  577,    0,  572,  573,  576,  571,
      574,  577,  578,  579,  573,  576,  580,  581,  577,    0,
      572,  579,  575,  580,  619,  578,  572,  575,  617,  575,
      574,  577,  578,  579,  589,  576,    0,  581,  577,  578,

      579,  582,  583,  580,  581,  582,  583,  584,  579,  575,
      585,  619,  578,    0,  589,  584,  586,    0,  620,  578,
      579,  589,    0,  585,  581,  582,  583,  584,  582,  583,
      585,  586,  582,  583,  584,  590,  586,  585,  588,  587,
      588,  589,  584,  586,  591,  620,  621,  587,  591,  592,
      585,    0,  582,  583,  584,  590,    0,  585,  586,  587,
      588,    0,  590,  586,  591,  588,  587,  588,  593,  592,
      594,  591,  595,  621,  587,  591,  592,    0,  593,  597,
      596,  597,  590,  603,  598,  600,  587,  588,  593,  600,
      594,  591,  595,  598,  596,  593,  592,  594,  599,  595,

      596,  597,  623,  603,  598,  593,  597,  596,  597,  600,
      603,  598,  600,  604,  599,  593,  600,  594,  599,  595,
      598,  596,  601,  605,  602,  599,  602,  596,  597,  623,
      603,  598,  606,  604,  607,  608,  600,  601,  624,  605,
      604,  599,  601,  605,  602,  599,  625,  626,  627,  601,
      605,  602,  606,  602,  607,  608,  628,  629,  630,  606,
      604,  607,  608,  631,  601,  624,  605,  633,  634,  601,
      605,  602,  635,  625,  626,  627,  638,  639,  640,  606,
      641,  607,  608,  628,  629,  630,  646,  647,  648,  651,
      631,  652,  653,  654,  633,  634,  655,  657,  658,  635,

      659,  660,  661,  638,  639,  640,  662,  641,  663,  664,
      666,  667,  668,  646,  647,  648,  651,  670,  652,  653,
      654,  671,  673,  655,  657,  658,  674,  659,  660,  661,
      675,  737,  676,  662,  677,  663,  664,  666,  667,  668,
      739,  740,  673,    0,  670,  741,  674,    0,  671,  673,
      675,  675,  676,  674,  677,  678,  678,  675,  737,  676,
      680,  677,    0,    0,  681,  679,  682,  739,  740,  673,
      680,    0,  741,  674,  679,  685,  678,  675,  675,  676,
      680,  677,  678,  678,  681,  679,  682,  680,  683,  684,
      686,  681,  679,  682,  742,  685,  684,  680,  683,  687,

        0,  679,  685,  678,  689,  744,  745,  680,  683,  684,
      686,  681,  679,  682,  687,  683,  684,  686,  688,  687,
      690,  742,  685,  684,  689,  683,  687,  688,  691,  692,
      694,  689,  744,  745,  694,  683,  684,  686,  688,  693,
      690,  687,    0,  691,  692,  688,  687,  690,  691,  692,
      694,  689,  696,  693,  688,  691,  692,  694,  697,  693,
      697,  694,  695,  748,  700,  688,  693,  690,  698,  695,
      691,  692,  696,  701,  703,  691,  692,  694,  697,  696,
      693,  698,  695,  699,  700,  697,  693,  697,  698,  695,
      748,  700,  702,  701,  703,  698,  695,  705,  699,  696,

      701,  703,  704,  699,  705,  697,  706,  702,  698,  695,
      699,  700,  702,    0,  752,  698,  704,  705,  707,  702,
      701,  703,  704,    0,  705,  699,  706,  708,  709,  704,
      699,  705,  710,  706,  702,    0,  710,  711,  707,  702,
      711,  752,  713,  704,  705,  707,  712,  708,  709,  704,
      714,  715,  754,  706,  708,  709,  710,  711,    0,  710,
      718,  712,  713,  710,  711,  707,  712,  711,    0,  713,
      714,  715,  716,  712,  708,  709,  720,  714,  715,  754,
      718,  717,  719,  710,  711,  716,  719,  718,  712,  713,
      722,  721,  716,  712,  717,  721,  720,  714,  715,  716,

        0,  717,  719,  720,    0,  722,  757,  718,  717,  719,
      722,  727,  716,  719,  726,  721,  724,  722,  721,  716,
      724,  717,  721,  720,  723,  723,  727,  726,  717,  719,
      725,  727,  722,  757,  726,  728,  729,  722,  727,  728,
      724,  726,  721,  724,  725,  723,    0,  724,  730,  732,
      725,  723,  723,  727,  726,  760,  729,  725,  727,  728,
      733,  726,  728,  729,  731,  731,  728,  724,  730,  732,
      734,  725,  723,  736,  735,  730,  732,  725,  735,  761,
      733,  763,  760,  729,  734,  731,  728,  733,  764,  766,
      734,  731,  731,  736,  767,  730,  732,  734,  735,  768,

      736,  735,  770,  771,  774,  735,  761,  733,  763,  776,
      777,  734,  731,  778,  783,  764,  766,  734,  784,  785,
      736,  767,  787,  786,  790,  735,  768,    0,  789,  770,
      771,  774,  786,  788,  836,  789,  776,  777,  784,  785,
      778,  783,  787,  786,  790,  784,  785,  788,  789,  787,
      786,  790,  792,  788,  791,  789,  791,  793,  794,  786,
      788,  836,  789,    0,    0,  784,  785,  792,  838,  787,
      786,  790,  792,  796,  788,  789,  791,  793,  794,  792,
      788,  791,  797,  791,  793,  794,  795,  798,  795,    0,
      799,  800,  801,  796,  792,  838,  802,    0,    0,  792,

      796,  801,  797,  791,  793,  794,  803,  798,  795,  797,
      799,  800,  801,  795,  798,  795,  802,  799,  800,  801,
      796,  804,  805,  802,  806,  808,  803,  807,  801,  797,
      809,    0,  811,  803,  798,  795,  811,  799,  800,  801,
      807,  804,  805,  802,  806,  808,  812,  807,  804,  805,
      809,  806,  808,  803,  807,  810,  811,  809,  814,  811,
      815,  813,  810,  811,  816,    0,  812,  807,  804,  805,
      843,  806,  808,  812,  807,  810,  813,  809,  814,    0,
      815,  813,  810,  811,  816,  814,  818,  815,  813,  810,
      817,  816,  817,  812,  819,  820,  845,  843,  822,    0,

      818,    0,  810,  813,  846,  814,  818,  815,  813,  821,
      849,  816,  817,  818,  819,  820,  821,  817,  822,  817,
      823,  819,  820,  845,  823,  822,  824,  818,  826,  821,
      824,  846,  827,  818,  825,    0,  821,  849,  828,  817,
      829,  819,  820,  821,  823,  822,  852,  823,  826,  825,
      824,  823,  827,  824,  825,  826,  821,  824,  828,  827,
      829,  825,  830,  853,  854,  828,  856,  829,  857,  830,
        0,  823,  858,  852,  859,  826,  825,  824,  860,  827,
      861,  825,  830,  862,  861,  828,  856,  829,  857,  830,
      853,  854,  858,  856,  859,  857,  830,  863,  860,  858,

      864,  859,  865,  862,  861,  860,  866,  861,  867,  830,
      862,  861,  863,  856,  868,  857,  868,  863,  869,  858,
      864,  859,  865,    0,  863,  860,  866,  864,  867,  865,
      862,  861,  871,  866,  872,  867,  868,  870,  869,  863,
      873,  868,  875,  868,  863,  869,  881,  864,  876,  865,
      870,  874,  871,  866,  872,  867,    0,  870,  883,  871,
      873,  872,  875,  868,  870,  869,  874,  873,  876,  875,
      877,  874,  878,  881,  879,  876,  880,  870,  874,  871,
      878,  872,  885,  877,  870,  883,  887,  873,  888,  875,
      877,  890,  878,  874,  879,  876,  880,  877,  874,  878,

      891,  879,    0,  880,  893,    0,  890,  878,  895,  885,
      877,  890,  894,  887,  892,  888,  896,  877,  890,  878,
      891,  879,  898,  880,  893,  894,  897,  891,  895,  892,
      899,  893,  894,  890,  892,  895,  896,  897,  890,  894,
      901,  892,  898,  896,    0,  904,  897,  891,  905,  898,
      907,  893,  894,  897,    0,  895,  892,  899,  908,  894,
      906,  892,  911,  896,  897,  904,  912,  901,  905,  898,
      907,    0,  904,  897,  906,  905,    0,  907,  908,    0,
      906,    0,  911,    0,    0,  908,  912,  906,    0,  911,
        0,    0,  904,  912,    0,  905,    0,  907,    0,    0,

        0,  906,    0,    0,    0,  908,    0,  906,    0,  911,
        0,    0,    0,  912,  914,    0,    0,  914,  915,    0,
      915,  915,  917,    0,  917,  917,  918,    0,  918,  918,
      919,    0,  919,  919,  920,    0,  920,  920,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,

      913,  913,  913,  913
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1589 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * out_str ,yyscan_t yyscanner );

int hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *hsql_get_lloc (yyscan_t yyscanner );
    
        void hsql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 51 "flex_lexer.l"


#line 1837 "flex_lexer.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 914 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 913 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 57 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 61 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(PART)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 125:
#line 183 "flex_lexer.l"
case 126:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2596 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 914 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 914 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 913);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "hsql_set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "hsql_set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void hsql_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *hsql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void hsql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 213 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}
